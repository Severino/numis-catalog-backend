scalar Void

type Material {
  id: ID!
  name: String!
}

input NameInput {
  id: ID
  name: String
}

input PersonInput {
  id: ID
  name: String
  role: String
}

type Location {
  lat: Float
  lon: Float
}

input LocationInput {
  lat: Float
  lon: Float
}

input MintInput {
  id: ID
  name: String
  location: LocationInput
  uncertain: Boolean
}

type CoinSideInformation {
  fieldText: String
  innerInscript: String
  intermediateInscript: String
  outerInscript: String
  misc: String
}

input CoinSideInformationInput {
  fieldText: String = ""
  innerInscript: String = ""
  intermediateInscript: String = ""
  outerInscript: String = ""
  misc: String = ""
}

type ReducedCoinType {
  id: ID
  projectId: String
  treadwellId: String,
  completed: Boolean
}

type CoinType {
  id: ID
  projectId: String
  treadwellId: String
  mint: Mint
  mintAsOnCoin: String
  material: Material
  nominal: Nominal
  yearOfMinting: String
  donativ: Boolean
  procedure: String
  issuers: [TitledPerson]
  overlords: [Overlord]
  otherPersons: [Person]
  caliph: Person
  avers: CoinSideInformation
  reverse: CoinSideInformation
  cursiveScript: Boolean
  coinMarks: [CoinMark]
  literature: String
  pieces: [String]
  specials: String
  excludeFromTypeCatalogue: Boolean
  excludeFromMapApp: Boolean,
  internalNotes: String
}

input CoinTypeInput {
  id: ID = null
  projectId: String = ""
  treadwellId: String = ""
  mint: ID = null
  mintAsOnCoin: String = ""
  material: ID = null
  nominal: ID = null
  yearOfMinting: String = ""
  donativ: Boolean = false
  procedure: String = ""
  issuers: [TitledPersonInput] = []
  overlords: [OverlordInput] = []
  otherPersons: [ID] = []
  caliph: ID = null
  avers: CoinSideInformationInput
  reverse: CoinSideInformationInput
  cursiveScript: Boolean = false
  coinMarks: [ID] = []
  literature: String = ""
  pieces: [String] = []
  specials: String = ""
  excludeFromTypeCatalogue: Boolean
  excludeFromMapApp: Boolean,
  internalNotes: String
}

type CoinMark {
  id: ID!
  name: String
}

type Mint {
  id: ID!
  name: String
  location: Location
  uncertain: Boolean
}

type Person {
  id: ID!
  name: String!
  role: String
}

input TitledPersonInput {
  person: ID!
  titles: [ID]!
  honorifics: [ID]!
}

type Title {
  id: ID!
  name: String!
}

type Honorific {
  id: ID!
  name: String!
}

type Nominal {
  id: ID!
  name: String!
}

type Query {
  ping: String

  coinMark: [CoinMark]
  nominal: [Nominal]!
  material: [Material]!
  person: [Person]!
  honorific: [Honorific]!
  title: [Title]!
  mint: [Mint]!

  searchCoinMark(text: String): [CoinMark]
  searchHonorific(text: String): [Honorific]
  searchMaterial(text: String): [Material]
  searchMint(text: String): [Mint]
  searchTitle(text: String): [Title]
  searchNominal(text: String): [Nominal]
  searchPerson(text: String): [Person]

  searchPersonsWithRole(text: String!, filter: [String]): [Person]
  searchPersonsWithoutRole(text: String!): [Person]

  getCoinMark(id: Int!): CoinMark
  getHonorific(id: Int!): Honorific
  getMaterial(id: Int!): Material
  getMint(id: Int!): Mint
  getPerson(id: Int!): Person
  getTitle(id: Int!): Title
  getNominal(id: Int!): Nominal

  searchMintWardens(text: String): [Person]

  getPersonsByRole(role: String): [Person]!

  getOverlord(id: ID!): Overlord

  getReducedCoinTypeList(id: ID): [ReducedCoinType]
  getCoinType(id: ID!): CoinType

  getTypesByOverlord(id:ID!):[CoinType] 
  getTypes:[CoinType]

  getTypeComplete(id:ID!):Boolean
}

type Mutation {
  addCoinMark(data: NameInput): Void
  updateCoinMark(data: NameInput): Void
  deleteCoinMark(id: Int): Void

  addHonorific(data: NameInput): Void
  updateHonorific(data: NameInput): Void
  deleteHonorific(id: Int): Void

  addMaterial(data: NameInput): Void
  updateMaterial(data: NameInput): Void
  deleteMaterial(id: Int): Void

  addMint(data: MintInput): Void
  updateMint(data: MintInput): Void
  deleteMint(id: Int): Void

  addPerson(data: PersonInput): Void
  updatePerson(data: PersonInput): Void
  deletePerson(id: Int): Void

  addTitle(data: NameInput): Void
  updateTitle(data: NameInput): Void
  deleteTitle(id: Int): Void

  addNominal(data: NameInput): Void
  updateNominal(data: NameInput): Void
  deleteNominal(id: Int): Void

  addCoinType(data: CoinTypeInput): Void
  removeCoinType(id: ID): Void
  updateCoinType(id: ID, data: CoinTypeInput): Void

  setTypeComplete(id:ID!, completed:Boolean = true):Void
}

type Overlord {
  id: ID
  person: Person
  titles: [Title]!
  honorifics: [Honorific]!
  rank: Int
}

type TitledPerson {
  id: ID
  person: Person
  titles: [Title]
  honorifics: [Honorific]
}

input OverlordInput {
  type: ID
  person: ID!
  rank: Int!
  titles: [Int]!
  honorifics: [Int]!
}
